import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, CallbackContext

# Constants for conversation states
MENU_2, AJUDA_2, CADASTRAMENTO_2, LISTAR_CADASTROS_2, REMOVER_CADASTROS_2, GERAR_ORCAMENTOS_2, IMPORTAR_LOGOTIPO_2, SAIR_2, MENU3 = range(9)

# Helper function to display the main menu
def menu_ajuda(update: Update, _: CallbackContext) -> int:
    
    keyboard = [
        [
            InlineKeyboardButton("Cadastramento", callback_data=str(CADASTRAMENTO_2))
        ],
        [
            InlineKeyboardButton("Listar Cadastros", callback_data=str(LISTAR_CADASTROS_2)),
            InlineKeyboardButton("Remover Cadastros", callback_data=str(REMOVER_CADASTROS_2)),
        ],
        [
            InlineKeyboardButton("Gerar Or√ßamentos", callback_data=str(GERAR_ORCAMENTOS_2)),
            InlineKeyboardButton("Importar Logotipo", callback_data=str(IMPORTAR_LOGOTIPO_2)),
        ],
        [
            InlineKeyboardButton("Sair", callback_data=str(SAIR_2)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    global id_mes
    id_mes = update.message.reply_text("Selecione uma op√ß√£o:", reply_markup=reply_markup)
    return MENU_2


# Helper function to go back to the main menu
def voltar(update: Update, _: CallbackContext) -> int:
    return menu_ajuda(update, _)

# Handler for handling button presses
def button(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    global id_mes
    # Determine which button was pressed
    option = int(query.data)

    if option == AJUDA_2:
        query.edit_message_text("Mais informa√ß√µes, erros, sujest√µes abra chamado no @suporteorcamentobot")
        return ConversationHandler.END
    elif option == CADASTRAMENTO_2:
        message = f"""
**Instru√ß√µes de Uso:**

1. Para iniciar o cadastro, escolha "Cadastrar Cliente" ou "Cadastrar Matriz" no menu inicial.

2. Digite o CPF ou CNPJ para dar in√≠cio ao cadastro. Caso seja um CNPJ v√°lido, o bot preencher√° automaticamente informa√ß√µes adicionais.

3. Preencha os demais campos solicitados pelo bot at√© que todos os campos obrigat√≥rios estejam preenchidos.

4. Caso deseje editar alguma informa√ß√£o do cadastro, o bot apresentar√° os campos edit√°veis numerados. Selecione o n√∫mero do campo que deseja modificar.

5. Ap√≥s preencher todos os campos obrigat√≥rios ou quando estiver satisfeito com as edi√ß√µes, selecione "Finalizar" para salvar o cadastro.

6. O cadastro ser√° salvo e conclu√≠da com sucesso.

7. A qualquer momento, voc√™ pode selecionar "Cancelar" para interromper a opera√ß√£o em andamento e apagar o progresso feito no cadastro.
        """
    elif option == MENU_2:
        id_mes = query.edit_message_text("Voltando..")
        context.bot.delete_message(chat_id=update.effective_chat.id, message_id=id_mes.message_id)
        return menu_ajuda(query, context)
    elif option == LISTAR_CADASTROS_2:
        message = f"""
1. Passo a Passo:

 ‚Ä¢ Digite /listar.
 ‚Ä¢ O bot apresentar√° as op√ß√µes dispon√≠veis para a listagem:
 ‚Ä¢ üìí Cliente: Para listar os cadastros de clientes.
 ‚Ä¢ üè≠ Matriz: Para listar os cadastros de matrizes.
 ‚Ä¢ Selecione a op√ß√£o desejada para visualizar os respectivos cadastros.
2. Observa√ß√µes:
Caso n√£o haja cadastros dispon√≠veis para o tipo selecionado (cliente ou matriz), o bot informar√° que nenhum cadastro foi encontrado.

3. Contato e Suporte:
Se precisar de ajuda ou tiver alguma d√∫vida, entre em contato conosco: @suportelistagembot.
        """
        
    elif option == REMOVER_CADASTROS_2:
        message = f"""
1. O bot apresenta uma lista de op√ß√µes para o usu√°rio escolher entre "Cliente" e "Matriz".

2. O usu√°rio escolhe o tipo de cadastro que deseja remover.

3. O bot lista os cadastros do tipo escolhido pelo usu√°rio e apresenta um n√∫mero ao lado de cada cadastro.

4. O usu√°rio seleciona o n√∫mero do cadastro que deseja excluir.

5. O bot confirma a exclus√£o do cadastro e realiza a remo√ß√£o dos dados do arquivo JSON.

6. O bot exibe uma mensagem indicando que o cadastro foi removido com sucesso.

7. Caso o usu√°rio decida cancelar a opera√ß√£o, ele pode selecionar a op√ß√£o "Cancelar" a qualquer momento durante o processo.

Se o usu√°rio escolher um tipo de cadastro que n√£o possui registros, o bot informar√° que n√£o h√° cadastros do tipo escolhido para serem removidos.

Se o usu√°rio selecionar um n√∫mero de cadastro inv√°lido, o bot informar√° que a escolha √© inv√°lida e o processo ser√° encerrado.
        """

    elif option == GERAR_ORCAMENTOS_2:
        message = f"""
1. Escolha o cliente para o qual deseja gerar o or√ßamento.

2. Envie as mensagens que deseja incluir no or√ßamento.

3. Envie o valor total do or√ßamento.

4. Opcionalmente, adicione uma observa√ß√£o ao or√ßamento.

O bot criar√° o arquivo PDF do or√ßamento e o enviar√° a voc√™.
Se tiver alguma d√∫vida ou precisar de ajuda, contate-nos no suporte: @suporteorcamentobot.
        """

    elif option == IMPORTAR_LOGOTIPO_2:
        message = f"""
1. Op√ß√µes do Menu:
 ‚Ä¢ Enviar Foto: Envia uma foto ao bot.
 ‚Ä¢ Ver Foto: Exibe a foto enviada anteriormente (se houver).
 ‚Ä¢ Excluir Foto: Remove a foto enviada (se houver).

2. Instru√ß√µes:
 ‚Ä¢ Selecione "Enviar Foto" e envie a foto.
 ‚Ä¢ Para ver a foto enviada, escolha "Ver Foto".
 ‚Ä¢ Para excluir a foto, selecione "Excluir Foto".

3. Limite de Tentativas:
 ‚Ä¢ Limite de 3 tentativas para enviar fotos.

Importante:
Fotos s√£o armazenadas de forma segura.
O bot n√£o compartilha suas fotos.
        """
    elif option == SAIR_2:
        query.edit_message_text("Saindo o menu ajuda.")
        return ConversationHandler.END

    # Offer a 'Voltar' button
    

    if id_mes:
        context.bot.delete_message(chat_id=update.effective_chat.id, message_id=id_mes.message_id)
    keyboard = [[InlineKeyboardButton("Voltar", callback_data=str(MENU_2)), InlineKeyboardButton("Sair", callback_data=str(SAIR_2))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(message, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)

    return MENU_2
